module pipeline_reg_f_d #(
    parameter WIDTH = 32
)(
    input logic clk,
    input logic [WIDTH - 1:0] instr_f, // fetch stage instruction
    input logic [WIDTH - 1:0] pc_f,
    input logic [WIDTH - 1:0] pc_plus_4_f, 
    output logic [WIDTH - 1:0] instr_d,
    output logic [WIDTH - 1:0] pc_d,
    output logic [WIDTH - 1:0] pc_plus_4_d
    /*
    input logic stall,
    input logic flush, for harzard
    */
);
    always_ff @(posedge clk) begin
        instr_d <= instr_f;
        pc_d <= pc_f;
        pc_plus_4_d <= pc_plus_4_d;
        /*if (!stall) begin
            instr_d <= instr_f;
            pc_d <= pc_f;
            pc_plus_4_d <= pc_plus_4_d;
        end
        if (flush) begin
            instr_D <= 0;           // nop
        end 
        */

    end

endmodule